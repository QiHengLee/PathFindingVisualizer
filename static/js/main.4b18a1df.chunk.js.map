{"version":3,"sources":["PathFindingVisualizer/Node/Node.js","algorithms/dijkstra.js","algorithms/bfs.js","algorithms/dfs.js","algorithms/aStar.js","PathFindingVisualizer/PathfindingVisualizer.js","index.js"],"names":["Node","props","state","this","row","col","isStart","isFinish","isWall","onMouseDown","onMouseUp","onMouseEnter","colorName","id","className","React","Component","Heap","grid","array","setup_Array_Pos","size","pos","length","minHeapPos","push","a","b","temp","v","idx","smallest","left","right","distance","swapNode","minHeapify","isEmpty","root","lastNode","dist","i","Math","floor","getNeighbors","node","neighbours","dfs","startNode","finishNode","nodeOrder","isVisited","dfsUtil","neighbour","previousNode","console","log","addNode","dict","f","unshift","eraseNode","min","shift","lowestF","keys","Object","Number","MAX_SAFE_INTEGER","calculateHValue","sRow","sCol","fRow","fCol","abs","PathfindingVisualizer","animateMap","setTimeout","animatePath","getPath","speed","document","getElementById","pathOrder","setState","progress","mouseIsPressed","startIsPressed","finishIsPressed","start_row","window","innerHeight","start_col","innerWidth","finish_row","finish_col","width","height","dijkstra","bfs","a_star","average","slow","fast","alertChooseAlgo","alertVisualProgress","initializeGrid","clearAll","rows","cols","createNode","algo","innerHTML","visualizeDijkstras","visualizeAStar","visualizeDFS","visualizeBFS","heap","decreaseKey","extractMin","isInMinHeap","Infinity","dijkstras","queue","openDict","g","h","minF","aStar","path","newGrid","slice","wallToggled","Modal","show","onHide","animation","Header","closeButton","Title","Body","Footer","Navbar","bg","Brand","Toggle","aria-controls","Collapse","Nav","NavDropdown","title","Item","onClick","chooseAlgo","chooseSpeed","Link","clearNodes","Button","visualizeAlgo","variant","map","rowIdx","key","nodeIdx","isPath","handleMouseDown","bind","handleMouseUp","handleMouseEnter","val","App","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.4b18a1df.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Node.css\";\n\nclass Node extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const {\n      row,\n      col,\n      isStart,\n      isFinish,\n      isWall,\n      onMouseDown,\n      onMouseUp,\n      onMouseEnter,\n    } = this.props;\n    // console.log(this.state.isVisited);\n    const colorName = isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${colorName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseUp={() => onMouseUp()}\n        onMouseEnter={() => onMouseEnter(row, col)}\n      ></div>\n    );\n  }\n}\n\nexport default Node;\n","class Heap {\n  constructor(grid) {\n    this.grid = grid;\n    this.array = this.setup_Array_Pos(grid);\n    this.size = 0;\n  }\n\n  setup_Array_Pos(grid) {\n    const array = [];\n    var pos = 0;\n    for (var row = 0; row < grid.length; row++) {\n      for (var col = 0; col < grid[0].length; col++) {\n        grid[row][col].minHeapPos = pos;\n        array.push(grid[row][col]);\n        pos++;\n      }\n    }\n    return array;\n  }\n\n  swapNode(a, b) {\n    var temp = this.array[a];\n    this.array[a] = this.array[b];\n    this.array[b] = temp;\n  }\n\n  isEmpty() {\n    return this.size === 0 ? true : false;\n  }\n\n  isInMinHeap(v) {\n    if (v.minHeapPos < this.size) {\n      return true;\n    }\n    return false;\n  }\n\n  minHeapify(idx) {\n    var smallest = idx;\n    var left = idx * 2 + 1;\n    var right = idx * 2 + 2;\n\n    if (\n      left < this.size &&\n      this.array[left].distance < this.array[smallest].distance\n    ) {\n      smallest = left;\n    }\n    if (\n      right < this.size &&\n      this.array[right].distance < this.array[smallest].distance\n    ) {\n      smallest = right;\n    }\n\n    if (smallest !== idx) {\n      this.array[smallest].minHeapPos = idx;\n      this.array[idx].minHeapPos = smallest;\n\n      this.swapNode(smallest, idx);\n\n      this.minHeapify(smallest);\n    }\n  }\n\n  extractMin() {\n    if (this.isEmpty()) {\n      return;\n    }\n\n    var root = this.array[0];\n\n    var lastNode = this.array[this.size - 1];\n    this.array[0] = lastNode;\n\n    lastNode.minHeapPos = 0;\n    root.minHeapPos = this.size - 1;\n\n    this.size -= 1;\n    this.minHeapify(0);\n\n    return root;\n  }\n\n  decreaseKey(v, dist) {\n    var i = v.minHeapPos;\n    v.distance = dist;\n\n    while (\n      i > 0 &&\n      this.array[i].distance < this.array[Math.floor((i - 1) / 2)].distance\n    ) {\n      this.array[i].minHeapPos = Math.floor((i - 1) / 2);\n      this.array[Math.floor((i - 1) / 2)].minHeapPos = i;\n      this.swapNode(i, Math.floor((i - 1) / 2));\n\n      i = Math.floor((i - 1) / 2);\n    }\n  }\n}\n\nexport const dijkstras = (grid, startNode, finishNode) => {\n  const heap = new Heap(grid);\n  const size = grid.length * grid[0].length;\n  heap.size = size;\n  var nodeOrder = [];\n\n  heap.decreaseKey(startNode, 0);\n  // nodeOrder.push(startNode);\n\n  while (!heap.isEmpty()) {\n    var min = heap.extractMin();\n    var neighbours = getNeighbors(min, grid);\n    for (const neighbour of neighbours) {\n      if (\n        heap.isInMinHeap(neighbour) &&\n        min.distance !== Infinity &&\n        neighbour.distance > min.distance + 1 && neighbour.isWall === false\n      ) {\n        heap.decreaseKey(neighbour, min.distance + 1);\n        neighbour.previousNode = min;\n        nodeOrder.push(neighbour);\n        if (\n          neighbour.col === finishNode.col &&\n          neighbour.row === finishNode.row\n        ) {\n          return nodeOrder;\n        }\n      }\n    }\n  }\n\n  return nodeOrder;\n};\n\nfunction getNeighbors(node, grid) {\n  const neighbours = [];\n  const { row, col } = node;\n  if (row > 0) {\n    neighbours.push(grid[row - 1][col]);\n  }\n  if (col < grid[0].length - 1) {\n    neighbours.push(grid[row][col + 1]);\n  }\n  if (row < grid.length - 1) {\n    neighbours.push(grid[row + 1][col]);\n  }\n  if (col > 0) {\n    neighbours.push(grid[row][col - 1]);\n  }\n\n  return neighbours;\n}\n","export const bfs = (grid, startNode, finishNode) => {\n    var nodeOrder = []\n    var queue = []\n    queue.push(startNode)\n    startNode.isVisited = true;\n    \n    while(queue.length > 0) {\n        var node = queue.shift();\n        var neighbours = getNeighbors(node, grid);\n        for (const neighbour of neighbours) {\n            if (!neighbour.isVisited && !neighbour.isWall) {\n                neighbour.previousNode = node;\n                neighbour.isVisited = true;\n                queue.push(neighbour);\n                nodeOrder.push(neighbour);\n                if (\n                    neighbour.col === finishNode.col &&\n                    neighbour.row === finishNode.row\n                ) {\n                    return nodeOrder;\n                }\n            }\n        }\n    }\n    console.log(nodeOrder)\n    return nodeOrder;\n  };\n\n  function getNeighbors(node, grid) {\n    const neighbours = [];\n    const { row, col } = node;\n    if (row > 0) {\n      neighbours.push(grid[row - 1][col]);\n    }\n    if (col < grid[0].length - 1) {\n      neighbours.push(grid[row][col + 1]);\n    }\n    if (row < grid.length - 1) {\n      neighbours.push(grid[row + 1][col]);\n    }\n    if (col > 0) {\n      neighbours.push(grid[row][col - 1]);\n    }\n  \n    return neighbours;\n  }\n  ","export const dfs = (grid, startNode, finishNode) => {\n    var nodeOrder = []\n    startNode.isVisited = true;\n\n    nodeOrder = dfsUtil(grid, startNode, finishNode, nodeOrder)\n    console.log(nodeOrder)\n    return nodeOrder\n};\n\nfunction dfsUtil(grid, startNode, finishNode, nodeOrder) {\n    var node = startNode\n    var neighbours = getNeighbors(node, grid);\n    for (const neighbour of neighbours) {\n        if (!neighbour.isVisited && !neighbour.isWall) {\n            neighbour.previousNode = node;\n            neighbour.isVisited = true;\n            nodeOrder.push(neighbour);\n            if (\n                neighbour.col === finishNode.col &&\n                neighbour.row === finishNode.row\n            ) {\n                return nodeOrder;\n            }\n            nodeOrder = dfsUtil(grid, neighbour, finishNode, nodeOrder)\n            if (\n                nodeOrder[nodeOrder.length-1].col === finishNode.col &&\n                nodeOrder[nodeOrder.length-1].row === finishNode.row\n            ) {\n                return nodeOrder;\n            }\n        }\n    }\n    return nodeOrder\n}\n\nfunction getNeighbors(node, grid) {\nconst neighbours = [];\nconst { row, col } = node;\nif (row > 0) {\n    neighbours.push(grid[row - 1][col]);\n}\nif (col < grid[0].length - 1) {\n    neighbours.push(grid[row][col + 1]);\n}\nif (row < grid.length - 1) {\n    neighbours.push(grid[row + 1][col]);\n}\nif (col > 0) {\n    neighbours.push(grid[row][col - 1]);\n}\n\nreturn neighbours;\n}\n","export const aStar = (grid, startNode, finishNode) => {\n    var nodeOrder = [];\n    var openDict = {};\n    \n    openDict = addNode(openDict, 0, startNode)\n    startNode.f = 0;\n    startNode.g = 0;\n    startNode.h = 0;\n\n    while(Object.keys(openDict).length > 0) {\n        var minF = lowestF(openDict);\n        var node = openDict[minF][0]\n        openDict = eraseNode(openDict, minF)\n        \n        node.isVisited = true;\n\n        var neighbours = getNeighbors(node, grid);\n        for (const neighbour of neighbours) {\n            if (neighbour.col === finishNode.col && neighbour.row === finishNode.row) \n            {\n                neighbour.previousNode = node\n                nodeOrder.push(neighbour)\n                return nodeOrder\n            }\n            else if (neighbour.isWall === false && neighbour.isVisited === false) {\n                \n                var g = node.g + 1;\n                var h = calculateHValue(neighbour.row, neighbour.col, finishNode.row, finishNode.col);\n                var f = g + h;\n\n                if (neighbour.f > f) {\n                    openDict = addNode(openDict, f, neighbour)\n                    neighbour.f = f\n                    neighbour.g = g\n                    neighbour.h = h\n                    neighbour.previousNode = node\n                    nodeOrder.push(neighbour)\n                }\n            }\n        }\n    }\n    return nodeOrder;\n  };\n\nfunction addNode(dict, f, node) {\n    if (f in dict) {\n        dict[f].unshift(node)\n    }\n    else {\n        dict[f] = [node]\n    }\n    return dict\n}\n\nfunction eraseNode(dict, min) {\n    if (dict[min].length === 1) {\n        delete dict[min]\n    }\n    else {\n        dict[min].shift()\n    }\n\n    return dict\n}\n\nfunction lowestF(dict) {\n    var keys = Object.keys(dict);\n    var min = Number.MAX_SAFE_INTEGER;\n    for (var i = 0; i < keys.length; i++) {\n        if (keys[i] < min) {\n            min = keys[i]\n        }\n    }\n    return min\n}\n\nfunction getNeighbors(node, grid) {\n    const neighbours = [];\n    const { row, col } = node;\n    if (row > 0) {\n        neighbours.push(grid[row - 1][col]);\n    }\n    if (col < grid[0].length - 1) {\n        neighbours.push(grid[row][col + 1]);\n    }\n    if (row < grid.length - 1) {\n        neighbours.push(grid[row + 1][col]);\n    }\n    if (col > 0) {\n        neighbours.push(grid[row][col - 1]);\n    }\n\n    return neighbours;\n}\n\nfunction calculateHValue(sRow, sCol, fRow, fCol) {\n    var row = sRow - fRow\n    var col = fCol - sCol\n    var val = Math.abs(row) + Math.abs (col); \n    return val\n}","import React from \"react\";\nimport Node from \"./Node/Node\";\nimport { dijkstras } from \"../algorithms/dijkstra\";\nimport { bfs } from \"../algorithms/bfs\";\nimport { dfs } from \"../algorithms/dfs\";\nimport { aStar } from \"../algorithms/aStar\";\nimport \"./PathfindingVisualizer.css\";\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport Button from 'react-bootstrap/Button'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport Modal from 'react-bootstrap/Modal'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass PathfindingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      startIsPressed: false,\n      finishIsPressed: false,\n      start_row : Math.floor((window.innerHeight)/34/2),\n      start_col : Math.floor((window.innerWidth)/26/4),\n      finish_row : Math.floor((window.innerHeight)/34/2),\n      finish_col : Math.floor((window.innerWidth)/26/4*3),\n      width: Math.floor((window.innerWidth)/26),\n      height: Math.floor((window.innerHeight)/33),\n      dijkstra: false,\n      dfs: false,\n      bfs: false,\n      a_star: false,\n      average : true,\n      slow : false,\n      fast : false,\n      speed: 25,\n      progress: true,\n      alertChooseAlgo: false,\n      alertVisualProgress: false\n    };\n  }\n\n  componentDidMount() {\n    this.initializeGrid(true);\n  }\n\n  initializeGrid(clearAll) {\n    const grid = [];\n    for (var rows = 0; rows < this.state.height; rows++) {\n      const row = [];\n      for (var cols = 0; cols < this.state.width; cols++) {\n        if (rows === this.state.start_row && cols === this.state.start_col) {\n          row.push(createNode(rows, cols, true, false));\n        }\n        else if (rows === this.state.finish_row && cols === this.state.finish_col) {\n          row.push(createNode(rows, cols, false, true));\n        }\n        else {\n          if (document.getElementById(`node-${rows}-${cols}`)) {\n            if(document.getElementById(`node-${rows}-${cols}`).className === \"node node-wall\" && !clearAll) {\n              row.push(createNode(rows, cols, false, false));\n              row[row.length-1].isWall = true\n            }\n            else {\n              document.getElementById(`node-${rows}-${cols}`).className=\"node\"\n              row.push(createNode(rows, cols, false, false));\n            }\n          }\n          else {\n            row.push(createNode(rows, cols, false, false));\n          }\n          \n        }\n      }\n      grid.push(row);\n    }\n    this.setState({ grid: grid });\n  }\n\n  chooseAlgo(algo) {\n    if (algo === \"dfs\") {\n      document.getElementById(\"visualizeButton\").innerHTML = \"Visualize Depth First Search\"\n      this.setState({dfs:true, bfs: false, dijkstra: false, a_star: false})\n    }\n    if (algo === \"bfs\") {\n      document.getElementById(\"visualizeButton\").innerHTML = \"Visualize Breadth First Search\"\n      this.setState({dfs:false, bfs: true, dijkstra: false, a_star: false})\n    }\n    if (algo === \"a_star\") {\n      document.getElementById(\"visualizeButton\").innerHTML = \"Visualize A*\"\n      this.setState({dfs:false, bfs: false, dijkstra: false, a_star: true})\n    }\n    if (algo === \"dijkstra\") {\n      document.getElementById(\"visualizeButton\").innerHTML = \"Visualize Dijkstra\"\n      this.setState({dfs:false, bfs: false, dijkstra: true, a_star: false})\n    }\n  }\n\n  chooseSpeed(speed) {\n    if (speed === \"average\") {\n      document.getElementById(\"speedInfo\").innerHTML = \"Speed : Average\"\n      this.setState({average : true, fast : false, slow : false, speed : 25})\n    }\n    else if (speed === \"fast\") {\n      document.getElementById(\"speedInfo\").innerHTML = \"Speed : Fast\"\n      this.setState({average : false, fast : true, slow : false, speed : 5})\n    }\n    else if (speed === \"slow\") {\n      document.getElementById(\"speedInfo\").innerHTML = \"Speed : Slow\"\n      this.setState({average : false, fast : false, slow : true, speed : 50})\n    }\n  }\n\n  visualizeAlgo() {\n    if (!this.state.progress) {\n      this.setState({alertVisualProgress: true})\n      return\n    }\n    this.initializeGrid(false)\n    this.setState({\n      progress: false\n    }, () => {\n      if (this.state.dijkstra === true) {\n        this.visualizeDijkstras()\n      }\n      else if (this.state.a_star === true) {\n        this.visualizeAStar()\n      }\n      else if (this.state.dfs === true) {\n        this.visualizeDFS()\n      }\n      else if (this.state.bfs === true) {\n        this.visualizeBFS()\n      }\n      else {\n        this.setState({alertChooseAlgo: true, progress: true})\n      }\n    });\n    \n  }\n\n  visualizeDijkstras() {\n    const { grid } = this.state;\n    const nodeOrder = dijkstras(\n      grid,\n      grid[this.state.start_row][this.state.start_col],\n      grid[this.state.finish_row][this.state.finish_col]\n    );\n    this.animateMap(nodeOrder);\n  }\n\n  visualizeBFS() {\n    const { grid } = this.state;\n    const nodeOrder = bfs(\n      grid,\n      grid[this.state.start_row][this.state.start_col],\n      grid[this.state.finish_row][this.state.finish_col]\n    );\n    this.animateMap(nodeOrder);\n  }\n\n  visualizeDFS() {\n    const { grid } = this.state;\n    const nodeOrder = dfs(\n      grid,\n      grid[this.state.start_row][this.state.start_col],\n      grid[this.state.finish_row][this.state.finish_col]\n    );\n    this.animateMap(nodeOrder);\n  }\n\n  visualizeAStar() {\n    const { grid } = this.state;\n    const nodeOrder = aStar(\n      grid,\n      grid[this.state.start_row][this.state.start_col],\n      grid[this.state.finish_row][this.state.finish_col]\n    );\n    // console.log(nodeOrder)\n    this.animateMap(nodeOrder);\n  }\n\n  animateMap = (nodeOrder) => {\n    for (let i = 0; i <= nodeOrder.length; i++) {\n      if (i === nodeOrder.length-1) {\n        setTimeout(() => {\n          this.animatePath(this.getPath(nodeOrder));\n        }, this.state.speed * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = nodeOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className=\"node node-visited\"\n      }, this.state.speed * i);\n    }\n  };\n\n  getPath(nodeOrder) {\n    var finishNode = nodeOrder[nodeOrder.length-1].previousNode;\n    var path = [];\n    while(true) {\n      if (finishNode.row === this.state.start_row && finishNode.col === this.state.start_col) {\n          break;\n      }\n      path.push(finishNode);\n      finishNode = finishNode.previousNode;\n    }\n    return path;\n  }\n\n  animatePath = (pathOrder) => {\n    for(let i = 0; i <= pathOrder.length; i++) {\n      if (i === pathOrder.length) {\n        setTimeout(() => {\n          this.setState({progress: true})  \n        }, 30 * i);\n        return\n      }\n      setTimeout(() => {\n        const node = pathOrder[pathOrder.length-1-i]\n        document.getElementById(`node-${node.row}-${node.col}`).className=\"node node-path\"\n      }, 30 * i);\n    }\n  };\n\n  handleMouseDown(row, col) {\n    if (this.state.grid[row][col].isStart) {\n      const newGrid = this.state.grid.slice();\n      newGrid[this.state.start_row][this.state.start_col].isStart = false;\n      newGrid[row][col].isStart = true;\n      this.setState({grid: newGrid, startIsPressed: true, start_col : col, start_row: row });  \n    }\n    else if (this.state.grid[row][col].isFinish) {\n      const newGrid = this.state.grid.slice();\n      newGrid[this.state.finish_row][this.state.finish_col].isFinish = false;\n      newGrid[row][col].isFinish = true;\n      this.setState({grid: newGrid, finishIsPressed: true, finish_col : col, finish_row: row });  \n    }\n    else {\n      const newGrid = wallToggled(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });  \n    }\n  }\n\n  handleMouseUp() {\n    this.setState({ startIsPressed: false });\n    this.setState({ mouseIsPressed: false });\n    this.setState({ finishIsPressed: false });\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.startIsPressed) {\n      const newGrid = this.state.grid.slice();\n      newGrid[this.state.start_row][this.state.start_col].isStart = false;\n      newGrid[row][col].isStart = true;\n      this.setState({grid: newGrid, startIsPressed: true, start_col : col, start_row: row });  \n    }\n    else if (this.state.finishIsPressed) {\n      const newGrid = this.state.grid.slice();\n      newGrid[this.state.finish_row][this.state.finish_col].isFinish = false;\n      newGrid[row][col].isFinish = true;\n      this.setState({grid: newGrid, finishIsPressed: true, finish_col : col, finish_row: row });  \n    }\n    else if (this.state.mouseIsPressed) {\n      const newGrid = wallToggled(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  clearNodes() {\n    if (!this.state.progress) {\n      this.setState({alertVisualProgress: true})\n      return\n    }\n    this.setState({\n      start_row : Math.floor((window.innerHeight)/34/2),\n      start_col : Math.floor((window.innerWidth)/25/4),\n      finish_row : Math.floor((window.innerHeight)/34/2),\n      finish_col : Math.floor((window.innerWidth)/25/4*3),\n    }, () => {\n      this.initializeGrid(true);\n    })\n  }\n\n  render() {\n    return (\n      <>\n      <Modal show={this.state.alertChooseAlgo} onHide={() => {this.setState({alertChooseAlgo: false})}} animation={false}>\n        <Modal.Header closeButton>\n          <Modal.Title>Alert</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Please choose an algorithm to visualize</Modal.Body>\n        <Modal.Footer>\n        </Modal.Footer>\n      </Modal>\n      <Modal show={this.state.alertVisualProgress} onHide={() => {this.setState({alertVisualProgress: false})}} animation={false}>\n        <Modal.Header closeButton>\n          <Modal.Title>Alert</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Visualization is in progress</Modal.Body>\n        <Modal.Footer>\n        </Modal.Footer>\n      </Modal>\n      <Navbar id=\"navbar\" bg=\"light\">\n          <Navbar.Brand>Pathfinding Visualizer</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <NavDropdown title=\"Algorithms\" id=\"basic-nav-dropdown\">\n                <NavDropdown.Item onClick={() => this.chooseAlgo(\"dijkstra\")}>Dijkstra's Algorithm</NavDropdown.Item>\n                <NavDropdown.Item onClick={() => this.chooseAlgo(\"a_star\")}>A* Algorithm</NavDropdown.Item>\n                <NavDropdown.Item onClick={() => this.chooseAlgo(\"dfs\")}>Depth First Search</NavDropdown.Item>\n                <NavDropdown.Item onClick={() => this.chooseAlgo(\"bfs\")}>Breadth First Search</NavDropdown.Item>\n              </NavDropdown>\n              <NavDropdown title=\"Speed\">\n                <NavDropdown.Item onClick={() => this.chooseSpeed(\"slow\")}>Slow</NavDropdown.Item>\n                <NavDropdown.Item onClick={() => this.chooseSpeed(\"average\")}>Average</NavDropdown.Item>\n                <NavDropdown.Item onClick={() => this.chooseSpeed(\"fast\")}>Fast</NavDropdown.Item>\n              </NavDropdown>\n              <Nav.Link onClick={() => this.clearNodes()}>Clear Nodes</Nav.Link>      \n              <Button id=\"visualizeButton\" onClick={() => this.visualizeAlgo()} variant=\"outline-success\">Choose Algorithm</Button>{' '}\n              <Nav.Link id=\"speedInfo\">Speed : Average</Nav.Link>      \n            </Nav>\n          </Navbar.Collapse>       \n      </Navbar>\n      <div className=\"grid\">\n        {this.state.grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx}>\n              {row.map((node, nodeIdx) => {\n                const {\n                  col,\n                  row,\n                  isWall,\n                  isStart,\n                  isFinish,\n                  isVisited,\n                  isPath,\n                } = node;\n                return (\n                  <Node\n                    key={nodeIdx}\n                    col={col}\n                    row={row}\n                    isWall={isWall}\n                    isStart={isStart}\n                    isFinish={isFinish}\n                    isVisited={isVisited}\n                    isPath={isPath}\n                    onMouseDown={this.handleMouseDown.bind(this)}\n                    onMouseUp={this.handleMouseUp.bind(this)}\n                    onMouseEnter={this.handleMouseEnter.bind(this)}\n                  ></Node>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n      </>\n    );\n  }\n}\n\nconst createNode = (row, col, isStart, isFinish) => {\n  return {\n    col,\n    row,\n    isStart,\n    isFinish,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n    minHeapPos: 0,\n    isPath: false,\n    f: Infinity,\n    g: Infinity,\n    h: Infinity\n  };\n};\n\nfunction wallToggled(grid, row, col) {\n  var val = grid[row][col].isWall;\n  grid[row][col].isWall = !val;\n  return grid;\n}\n\nexport default PathfindingVisualizer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PathfindingVisualizer from './PathFindingVisualizer/PathfindingVisualizer';\n\nclass App extends React.Component {\n    //React says that we have to define render\n    render() {\n        return (<PathfindingVisualizer></PathfindingVisualizer>);\n    }\n}\n\nReactDOM.render(\n    <App />, \n    document.querySelector('#root')\n);"],"sourceRoot":""}